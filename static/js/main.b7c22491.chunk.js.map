{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","types","className","src","alt","map","type","key","CardList","pokemon","user","i","SearchBox","searchChange","placeholder","onChange","Scroll","props","style","overflowY","borderTop","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","pokemonInfo","poke","infoUrl","url","fetch","response","json","individualData","pokemonStats","resp","allData","pokemonInfoArray","a","Promise","all","results","getOnePokemon","console","log","getPokemon","prevUrl","prevLinkUrl","prevBtnlink","prevLink","filteredPokemon","filter","creature","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b7c22491.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({ name, id, types }) => {\r\n\t// destructuring but we can put below in parameter above instead of props\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className='bg-white br3 tc dib pa2 ma2 grow shadow-5 ba bw1 b--black'>\r\n\t\t\t\t\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<img src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`} className='cardImg' alt={name}/>\r\n\t\t\t\t\t<h4 className='f4'>{name}</h4>\r\n\t\t\t\t\t<p>#{id}</p>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{types.map(type => {\r\n\t\t\t\t\t\t\treturn <li \r\n\t\t\t\t\t\t\tclassName={type}\r\n\t\t\t\t\t\t\tkey={type}>\r\n\t\t\t\t\t\t\t\t{type}\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ pokemon }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tpokemon.map((user, i) => {\r\n\t\t\t\t\t// console.log('user', user)\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={user.id} \r\n\t\t\t\t\t\t\tname={user.name} \r\n\t\t\t\t\t\t\t// url={pokemon[i].url} \r\n\t\t\t\t\t\t\tid={user.id}\r\n\t\t\t\t\t\t\ttypes={user.types}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t   </div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<input \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search for pokemon' \r\n\t\t\tclassName='bg-washed-blue br2 pa2 mb2' \r\n\t\t\tonChange={searchChange}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\t// return props.children\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', borderTop: '1px solid #96ccff', height: '68vh'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1 className='tc lightblue'>Hey! Where'd my content go!</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n// import Buttons from '../components/Buttons'\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      // url: 'https://pokeapi.co/api/v2/pokemon?limit=151',\r\n      pokemon: [],\r\n      pokemonInfo: [],\r\n      searchfield: '',\r\n      // prevLinkUrl: null,\r\n      // nextLinkUrl: null\r\n    }\r\n  }\r\n// FOR PREV AND NEXT PAGES ON MAIN PAGE - GET PREV AND NEXT FROM POKEMON ALLdATA\r\n\r\n// FOR EACH INDIVIDUAL POKEMON - WANT ADDITIONAL INFO BUT ALSO PREV AND NEXT PAGES - LINK{ID-1} LINK{ID+1}\r\n \r\n  async getOnePokemon(poke) {\r\n    // we need to fetch the new url to get additional info:\r\n    const infoUrl = poke.url\r\n    const response = await fetch(infoUrl)\r\n    const individualData = await response.json()\r\n    const pokemonStats = {\r\n      name: individualData.name,\r\n      id: individualData.id,\r\n      types: individualData.types.map(type => `${type.type.name}`)\r\n    }\r\n    return pokemonStats;\r\n  }\r\n  \r\n  async getPokemon() {\r\n    const url = 'https://pokeapi.co/api/v2/pokemon?limit=151';\r\n    const resp = await fetch(url)\r\n    const allData = await resp.json()\r\n    // console.log(allData) \r\n    // set the links for next and prev buttons\r\n    // this.setState({prevLinkUrl: allData.previous, nextLinkUrl: allData.next})\r\n    // console.log(this.state.prevLinkUrl, this.state.nextLinkUrl)\r\n    // empty array to store pokemon additional details\r\n    let pokemonInfoArray = [];\r\n    // includes name and url to more infomation\r\n    this.setState({ pokemon: allData }, async () => {\r\n      // then need to loop through all links with extra info:\r\n      try {\r\n        pokemonInfoArray = await Promise.all(allData.results.map(async poke => {\r\n          return this.getOnePokemon(poke)\r\n        }))\r\n      } catch (err) {\r\n        console.log('error: ', err)\r\n      }\r\n      this.setState({ pokemonInfo: pokemonInfoArray }) \r\n      // console.log(pokemonInfoArray)  \r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getPokemon()\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n  }\r\n\r\n  // Need to fetch urls for prev and next buttons:\r\n  async prevBtn() {\r\n    // if it's null we need to return otherwise:\r\n    // we need to fetch the new url to get additional info:\r\n    const prevUrl = this.state.prevLinkUrl;\r\n    const response = await fetch(prevUrl)\r\n    const prevBtnlink = await response.json()\r\n    return this.setState({prevLink: prevBtnlink});\r\n\r\n  }\r\n\r\n  // async nextBtn() {\r\n    // we need to fetch the new url to get additional info:\r\n    // const nextUrl = this.state.nextLinkUrl;\r\n    // console.log(this.state.nextLinkUrl)\r\n    // const response = await fetch(nextUrl)\r\n    // const nextBtnlink = await response.json()\r\n    // console.log(this.state.prevLinkUrl, this.state.nextLinkUrl)\r\n    // console.log('NEXT!!!')\r\n    // return this.setState({nextLinkUrl: nextBtnlink});\r\n  // }\r\n\r\n  render() {\r\n    // instead of calling this.state.searchfield and this.state.robots we can destructure:\r\n    const { pokemonInfo, searchfield } = this.state\r\n    const filteredPokemon = pokemonInfo.filter(creature => {\r\n      return creature.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    \r\n    return !pokemonInfo.length ? \r\n      (\r\n        <div className='tc'>\r\n          <img alt=\"Pokemon\" src=\"https://fontmeme.com/permalink/200614/e133f5ffb61b822577329b6b9de59e5e.png\" className=\"mt3 mb3\"/> \r\n          <br/>\r\n          <h1 className='tc light-green'>Loading</h1>\r\n        </div>\r\n      ) :\r\n      (\r\n        <div className='tc'>\r\n          <img alt=\"Pokemon\" src=\"https://fontmeme.com/permalink/200614/e133f5ffb61b822577329b6b9de59e5e.png\" className=\"mt3 mb3\"/> \r\n          <br/>\r\n          <SearchBox searchChange = {this.onSearchChange} />\r\n\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList pokemon={ filteredPokemon } />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n\r\n          {/*<div className='btns'>\r\n          {console.log('prev',  this.state.prevLinkUrl, 'next', this.state.nextLinkUrl)}\r\n            <button className='prevBtn' onClick={this.prevBtn}>Prev Page</button>\r\n            <button \r\n                        className='nextBtn'\r\n                        onClick={async () => {\r\n                          // console.log(this.state.nextLinkUrl)\r\n            \r\n                          const nextUrl = this.state.nextLinkUrl;\r\n                          // console.log(this.state.nextLinkUrl)\r\n                          const response = await fetch(nextUrl)\r\n                          const nextBtnlink = await response.json()\r\n                          // console.log(this.state.prevLinkUrl, this.state.nextLinkUrl)\r\n                          console.log('NEXT!!!')\r\n                          console.log('irjerijari', )\r\n                          this.setState({url: nextBtnlink});\r\n                          this.getPokemon();\r\n            \r\n            \r\n                        }}>Next Page</button>\r\n          </div>*/}\r\n\r\n        </div>\r\n      );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}